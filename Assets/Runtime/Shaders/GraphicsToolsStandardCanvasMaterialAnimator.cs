// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using UnityEngine;

namespace Microsoft.MixedReality.GraphicsTools
{
    /// <summary>
    /// This class was auto generated via Assets > Graphics Tools > Generate Canvas Material Animator.
    /// Use Unity's animation system to animate fields on this class to drive material properties on CanvasRenderers.
    /// Version=0.1.0
    /// </summary>
    public class GraphicsToolsStandardCanvasMaterialAnimator : BaseCanvasMaterialAnimator
    {
        [Header("Material Properties")]
        [HideInInspector] public Color _Color = Color.white;
        public static int _ColorID = Shader.PropertyToID("_Color");
        [HideInInspector] public Texture2D _MainTex = null;
        public static int _MainTexID = Shader.PropertyToID("_MainTex");
        [HideInInspector] public float _AlbedoAlphaMode = 0f;
        public static int _AlbedoAlphaModeID = Shader.PropertyToID("_AlbedoAlphaMode");
        [HideInInspector] public float _AlbedoAssignedAtRuntime = 0f;
        public static int _AlbedoAssignedAtRuntimeID = Shader.PropertyToID("_AlbedoAssignedAtRuntime");
        [HideInInspector, Range(0f, 1f)] public float _Cutoff = 0.5f;
        public static int _CutoffID = Shader.PropertyToID("_Cutoff");
        [HideInInspector, Range(0f, 1f)] public float _Metallic = 0f;
        public static int _MetallicID = Shader.PropertyToID("_Metallic");
        [HideInInspector, Range(0f, 1f)] public float _Smoothness = 0.5f;
        public static int _SmoothnessID = Shader.PropertyToID("_Smoothness");
        [HideInInspector] public float _EnableChannelMap = 0f;
        public static int _EnableChannelMapID = Shader.PropertyToID("_EnableChannelMap");
        [HideInInspector] public Texture2D _ChannelMap = null;
        public static int _ChannelMapID = Shader.PropertyToID("_ChannelMap");
        [HideInInspector] public float _EnableNormalMap = 0f;
        public static int _EnableNormalMapID = Shader.PropertyToID("_EnableNormalMap");
        [HideInInspector] public Texture2D _NormalMap = null;
        public static int _NormalMapID = Shader.PropertyToID("_NormalMap");
        [HideInInspector] public float _NormalMapScale = 1f;
        public static int _NormalMapScaleID = Shader.PropertyToID("_NormalMapScale");
        [HideInInspector] public float _EnableEmission = 0f;
        public static int _EnableEmissionID = Shader.PropertyToID("_EnableEmission");
        [HideInInspector] public Color _EmissiveColor = Color.white;
        public static int _EmissiveColorID = Shader.PropertyToID("_EmissiveColor");
        [HideInInspector] public float _EnableTriplanarMapping = 0f;
        public static int _EnableTriplanarMappingID = Shader.PropertyToID("_EnableTriplanarMapping");
        [HideInInspector] public float _EnableSSAA = 0f;
        public static int _EnableSSAAID = Shader.PropertyToID("_EnableSSAA");
        [HideInInspector, Range(-5f, 0f)] public float _MipmapBias = -2f;
        public static int _MipmapBiasID = Shader.PropertyToID("_MipmapBias");
        [HideInInspector] public float _EnableLocalSpaceTriplanarMapping = 0f;
        public static int _EnableLocalSpaceTriplanarMappingID = Shader.PropertyToID("_EnableLocalSpaceTriplanarMapping");
        [HideInInspector, Range(1f, 16f)] public float _TriplanarMappingBlendSharpness = 4f;
        public static int _TriplanarMappingBlendSharpnessID = Shader.PropertyToID("_TriplanarMappingBlendSharpness");
        [HideInInspector] public float _DirectionalLight = 1f;
        public static int _DirectionalLightID = Shader.PropertyToID("_DirectionalLight");
        [HideInInspector] public float _SpecularHighlights = 1f;
        public static int _SpecularHighlightsID = Shader.PropertyToID("_SpecularHighlights");
        [HideInInspector] public float _SphericalHarmonics = 0f;
        public static int _SphericalHarmonicsID = Shader.PropertyToID("_SphericalHarmonics");
        [HideInInspector] public float _Reflections = 0f;
        public static int _ReflectionsID = Shader.PropertyToID("_Reflections");
        [HideInInspector] public float _Refraction = 0f;
        public static int _RefractionID = Shader.PropertyToID("_Refraction");
        [HideInInspector, Range(0f, 3f)] public float _RefractiveIndex = 0f;
        public static int _RefractiveIndexID = Shader.PropertyToID("_RefractiveIndex");
        [HideInInspector] public float _RimLight = 0f;
        public static int _RimLightID = Shader.PropertyToID("_RimLight");
        [HideInInspector] public Color _RimColor = Color.white;
        public static int _RimColorID = Shader.PropertyToID("_RimColor");
        [HideInInspector, Range(0f, 8f)] public float _RimPower = 0.25f;
        public static int _RimPowerID = Shader.PropertyToID("_RimPower");
        [HideInInspector] public float _VertexColors = 0f;
        public static int _VertexColorsID = Shader.PropertyToID("_VertexColors");
        [HideInInspector] public float _VertexExtrusion = 0f;
        public static int _VertexExtrusionID = Shader.PropertyToID("_VertexExtrusion");
        [HideInInspector] public float _VertexExtrusionValue = 0f;
        public static int _VertexExtrusionValueID = Shader.PropertyToID("_VertexExtrusionValue");
        [HideInInspector] public float _VertexExtrusionSmoothNormals = 0f;
        public static int _VertexExtrusionSmoothNormalsID = Shader.PropertyToID("_VertexExtrusionSmoothNormals");
        [HideInInspector, Range(0f, 10f)] public float _BlendedClippingWidth = 1f;
        public static int _BlendedClippingWidthID = Shader.PropertyToID("_BlendedClippingWidth");
        [HideInInspector] public float _ClippingBorder = 0f;
        public static int _ClippingBorderID = Shader.PropertyToID("_ClippingBorder");
        [HideInInspector, Range(0f, 1f)] public float _ClippingBorderWidth = 0.025f;
        public static int _ClippingBorderWidthID = Shader.PropertyToID("_ClippingBorderWidth");
        [HideInInspector] public Color _ClippingBorderColor = Color.white;
        public static int _ClippingBorderColorID = Shader.PropertyToID("_ClippingBorderColor");
        [HideInInspector] public float _NearPlaneFade = 0f;
        public static int _NearPlaneFadeID = Shader.PropertyToID("_NearPlaneFade");
        [HideInInspector] public float _NearLightFade = 0f;
        public static int _NearLightFadeID = Shader.PropertyToID("_NearLightFade");
        [HideInInspector, Range(0f, 10f)] public float _FadeBeginDistance = 0.85f;
        public static int _FadeBeginDistanceID = Shader.PropertyToID("_FadeBeginDistance");
        [HideInInspector, Range(0f, 10f)] public float _FadeCompleteDistance = 0.5f;
        public static int _FadeCompleteDistanceID = Shader.PropertyToID("_FadeCompleteDistance");
        [HideInInspector, Range(0f, 1f)] public float _FadeMinValue = 0f;
        public static int _FadeMinValueID = Shader.PropertyToID("_FadeMinValue");
        [HideInInspector] public float _HoverLight = 1f;
        public static int _HoverLightID = Shader.PropertyToID("_HoverLight");
        [HideInInspector] public float _EnableHoverColorOverride = 0f;
        public static int _EnableHoverColorOverrideID = Shader.PropertyToID("_EnableHoverColorOverride");
        [HideInInspector] public Color _HoverColorOverride = Color.white;
        public static int _HoverColorOverrideID = Shader.PropertyToID("_HoverColorOverride");
        [HideInInspector] public float _ProximityLight = 0f;
        public static int _ProximityLightID = Shader.PropertyToID("_ProximityLight");
        [HideInInspector] public float _EnableProximityLightColorOverride = 0f;
        public static int _EnableProximityLightColorOverrideID = Shader.PropertyToID("_EnableProximityLightColorOverride");
        [HideInInspector] public Color _ProximityLightCenterColorOverride = Color.white;
        public static int _ProximityLightCenterColorOverrideID = Shader.PropertyToID("_ProximityLightCenterColorOverride");
        [HideInInspector] public Color _ProximityLightMiddleColorOverride = Color.white;
        public static int _ProximityLightMiddleColorOverrideID = Shader.PropertyToID("_ProximityLightMiddleColorOverride");
        [HideInInspector] public Color _ProximityLightOuterColorOverride = Color.white;
        public static int _ProximityLightOuterColorOverrideID = Shader.PropertyToID("_ProximityLightOuterColorOverride");
        [HideInInspector] public float _ProximityLightSubtractive = 0f;
        public static int _ProximityLightSubtractiveID = Shader.PropertyToID("_ProximityLightSubtractive");
        [HideInInspector] public float _ProximityLightTwoSided = 0f;
        public static int _ProximityLightTwoSidedID = Shader.PropertyToID("_ProximityLightTwoSided");
        [HideInInspector, Range(0f, 1f)] public float _FluentLightIntensity = 1f;
        public static int _FluentLightIntensityID = Shader.PropertyToID("_FluentLightIntensity");
        [HideInInspector] public float _RoundCorners = 0f;
        public static int _RoundCornersID = Shader.PropertyToID("_RoundCorners");
        [HideInInspector, Range(0f, 0.5f)] public float _RoundCornerRadius = 0.25f;
        public static int _RoundCornerRadiusID = Shader.PropertyToID("_RoundCornerRadius");
        [HideInInspector, Range(0f, 0.5f)] public float _RoundCornerMargin = 0.01f;
        public static int _RoundCornerMarginID = Shader.PropertyToID("_RoundCornerMargin");
        [HideInInspector] public float _IndependentCorners = 0f;
        public static int _IndependentCornersID = Shader.PropertyToID("_IndependentCorners");
        [HideInInspector] public Vector3 _RoundCornersRadius = Vector3.zero;
        public static int _RoundCornersRadiusID = Shader.PropertyToID("_RoundCornersRadius");
        [HideInInspector] public float _RoundCornersHideInterior = 0f;
        public static int _RoundCornersHideInteriorID = Shader.PropertyToID("_RoundCornersHideInterior");
        [HideInInspector] public float _BorderLight = 0f;
        public static int _BorderLightID = Shader.PropertyToID("_BorderLight");
        [HideInInspector] public float _BorderLightReplacesAlbedo = 0f;
        public static int _BorderLightReplacesAlbedoID = Shader.PropertyToID("_BorderLightReplacesAlbedo");
        [HideInInspector] public float _BorderLightOpaque = 0f;
        public static int _BorderLightOpaqueID = Shader.PropertyToID("_BorderLightOpaque");
        [HideInInspector, Range(0f, 1f)] public float _BorderWidth = 0.1f;
        public static int _BorderWidthID = Shader.PropertyToID("_BorderWidth");
        [HideInInspector] public float _BorderColorMode = 0f;
        public static int _BorderColorModeID = Shader.PropertyToID("_BorderColorMode");
        [HideInInspector, Range(0f, 1f)] public float _BorderMinValue = 0.1f;
        public static int _BorderMinValueID = Shader.PropertyToID("_BorderMinValue");
        [HideInInspector] public Color _BorderColor = Color.white;
        public static int _BorderColorID = Shader.PropertyToID("_BorderColor");
        [HideInInspector] public float _EdgeSmoothingValue = 0.002f;
        public static int _EdgeSmoothingValueID = Shader.PropertyToID("_EdgeSmoothingValue");
        [HideInInspector, Range(0f, 1f)] public float _BorderLightOpaqueAlpha = 1f;
        public static int _BorderLightOpaqueAlphaID = Shader.PropertyToID("_BorderLightOpaqueAlpha");
        [HideInInspector] public float _InnerGlow = 0f;
        public static int _InnerGlowID = Shader.PropertyToID("_InnerGlow");
        [HideInInspector] public Color _InnerGlowColor = Color.white;
        public static int _InnerGlowColorID = Shader.PropertyToID("_InnerGlowColor");
        [HideInInspector, Range(2f, 32f)] public float _InnerGlowPower = 4f;
        public static int _InnerGlowPowerID = Shader.PropertyToID("_InnerGlowPower");
        [HideInInspector] public float _GradientMode = 0f;
        public static int _GradientModeID = Shader.PropertyToID("_GradientMode");
        [HideInInspector] public Texture2D _IridescentSpectrumMap = null;
        public static int _IridescentSpectrumMapID = Shader.PropertyToID("_IridescentSpectrumMap");
        [HideInInspector, Range(0f, 1f)] public float _IridescenceIntensity = 0.5f;
        public static int _IridescenceIntensityID = Shader.PropertyToID("_IridescenceIntensity");
        [HideInInspector, Range(0f, 1f)] public float _IridescenceThreshold = 0.05f;
        public static int _IridescenceThresholdID = Shader.PropertyToID("_IridescenceThreshold");
        [HideInInspector, Range(-0.78f, 0.78f)] public float _IridescenceAngle = -0.78f;
        public static int _IridescenceAngleID = Shader.PropertyToID("_IridescenceAngle");
        [HideInInspector, Range(0f, 360f)] public float _GradientAngle = 180f;
        public static int _GradientAngleID = Shader.PropertyToID("_GradientAngle");
        [HideInInspector] public Color _GradientColor0 = Color.white;
        public static int _GradientColor0ID = Shader.PropertyToID("_GradientColor0");
        [HideInInspector] public Color _GradientColor1 = Color.white;
        public static int _GradientColor1ID = Shader.PropertyToID("_GradientColor1");
        [HideInInspector] public Color _GradientColor2 = Color.white;
        public static int _GradientColor2ID = Shader.PropertyToID("_GradientColor2");
        [HideInInspector] public Color _GradientColor3 = Color.white;
        public static int _GradientColor3ID = Shader.PropertyToID("_GradientColor3");
        [HideInInspector] public Color _GradientColor4 = Color.white;
        public static int _GradientColor4ID = Shader.PropertyToID("_GradientColor4");
        [HideInInspector] public float _EnvironmentColoring = 0f;
        public static int _EnvironmentColoringID = Shader.PropertyToID("_EnvironmentColoring");
        [HideInInspector, Range(0f, 3f)] public float _EnvironmentColorThreshold = 1.5f;
        public static int _EnvironmentColorThresholdID = Shader.PropertyToID("_EnvironmentColorThreshold");
        [HideInInspector, Range(0f, 1f)] public float _EnvironmentColorIntensity = 0.5f;
        public static int _EnvironmentColorIntensityID = Shader.PropertyToID("_EnvironmentColorIntensity");
        [HideInInspector] public Color _EnvironmentColorX = Color.white;
        public static int _EnvironmentColorXID = Shader.PropertyToID("_EnvironmentColorX");
        [HideInInspector] public Color _EnvironmentColorY = Color.white;
        public static int _EnvironmentColorYID = Shader.PropertyToID("_EnvironmentColorY");
        [HideInInspector] public Color _EnvironmentColorZ = Color.white;
        public static int _EnvironmentColorZID = Shader.PropertyToID("_EnvironmentColorZ");
        [HideInInspector] public float _Mode = 0f;
        public static int _ModeID = Shader.PropertyToID("_Mode");
        [HideInInspector] public float _CustomMode = 0f;
        public static int _CustomModeID = Shader.PropertyToID("_CustomMode");
        [HideInInspector] public float _SrcBlend = 1f;
        public static int _SrcBlendID = Shader.PropertyToID("_SrcBlend");
        [HideInInspector] public float _DstBlend = 0f;
        public static int _DstBlendID = Shader.PropertyToID("_DstBlend");
        [HideInInspector] public float _BlendOp = 0f;
        public static int _BlendOpID = Shader.PropertyToID("_BlendOp");
        [HideInInspector] public float _ZTest = 4f;
        public static int _ZTestID = Shader.PropertyToID("_ZTest");
        [HideInInspector] public float _ZWrite = 1f;
        public static int _ZWriteID = Shader.PropertyToID("_ZWrite");
        [HideInInspector] public float _ZOffsetFactor = 0f;
        public static int _ZOffsetFactorID = Shader.PropertyToID("_ZOffsetFactor");
        [HideInInspector] public float _ZOffsetUnits = 0f;
        public static int _ZOffsetUnitsID = Shader.PropertyToID("_ZOffsetUnits");
        [HideInInspector] public float _ColorWriteMask = 15f;
        public static int _ColorWriteMaskID = Shader.PropertyToID("_ColorWriteMask");
        [HideInInspector] public float _CullMode = 2f;
        public static int _CullModeID = Shader.PropertyToID("_CullMode");
        [HideInInspector, Range(-1f, 5000f)] public float _RenderQueueOverride = -1f;
        public static int _RenderQueueOverrideID = Shader.PropertyToID("_RenderQueueOverride");
        [HideInInspector] public float _UseWorldScale = 0f;
        public static int _UseWorldScaleID = Shader.PropertyToID("_UseWorldScale");
        [HideInInspector] public float _Stencil = 0f;
        public static int _StencilID = Shader.PropertyToID("_Stencil");
        [HideInInspector, Range(0f, 255f)] public float _StencilReference = 0f;
        public static int _StencilReferenceID = Shader.PropertyToID("_StencilReference");
        [HideInInspector] public float _StencilComparison = 0f;
        public static int _StencilComparisonID = Shader.PropertyToID("_StencilComparison");
        [HideInInspector] public float _StencilOperation = 0f;
        public static int _StencilOperationID = Shader.PropertyToID("_StencilOperation");

        /// <inheritdoc/>
        public override void InitializeFromMaterial(Material material)
        {
            _Color = material.GetColor(_ColorID);
            _MainTex = (Texture2D)material.GetTexture(_MainTexID);
            _AlbedoAlphaMode = material.GetFloat(_AlbedoAlphaModeID);
            _AlbedoAssignedAtRuntime = material.GetFloat(_AlbedoAssignedAtRuntimeID);
            _Cutoff = material.GetFloat(_CutoffID);
            _Metallic = material.GetFloat(_MetallicID);
            _Smoothness = material.GetFloat(_SmoothnessID);
            _EnableChannelMap = material.GetFloat(_EnableChannelMapID);
            _ChannelMap = (Texture2D)material.GetTexture(_ChannelMapID);
            _EnableNormalMap = material.GetFloat(_EnableNormalMapID);
            _NormalMap = (Texture2D)material.GetTexture(_NormalMapID);
            _NormalMapScale = material.GetFloat(_NormalMapScaleID);
            _EnableEmission = material.GetFloat(_EnableEmissionID);
            _EmissiveColor = material.GetColor(_EmissiveColorID);
            _EnableTriplanarMapping = material.GetFloat(_EnableTriplanarMappingID);
            _EnableSSAA = material.GetFloat(_EnableSSAAID);
            _MipmapBias = material.GetFloat(_MipmapBiasID);
            _EnableLocalSpaceTriplanarMapping = material.GetFloat(_EnableLocalSpaceTriplanarMappingID);
            _TriplanarMappingBlendSharpness = material.GetFloat(_TriplanarMappingBlendSharpnessID);
            _DirectionalLight = material.GetFloat(_DirectionalLightID);
            _SpecularHighlights = material.GetFloat(_SpecularHighlightsID);
            _SphericalHarmonics = material.GetFloat(_SphericalHarmonicsID);
            _Reflections = material.GetFloat(_ReflectionsID);
            _Refraction = material.GetFloat(_RefractionID);
            _RefractiveIndex = material.GetFloat(_RefractiveIndexID);
            _RimLight = material.GetFloat(_RimLightID);
            _RimColor = material.GetColor(_RimColorID);
            _RimPower = material.GetFloat(_RimPowerID);
            _VertexColors = material.GetFloat(_VertexColorsID);
            _VertexExtrusion = material.GetFloat(_VertexExtrusionID);
            _VertexExtrusionValue = material.GetFloat(_VertexExtrusionValueID);
            _VertexExtrusionSmoothNormals = material.GetFloat(_VertexExtrusionSmoothNormalsID);
            _BlendedClippingWidth = material.GetFloat(_BlendedClippingWidthID);
            _ClippingBorder = material.GetFloat(_ClippingBorderID);
            _ClippingBorderWidth = material.GetFloat(_ClippingBorderWidthID);
            _ClippingBorderColor = material.GetColor(_ClippingBorderColorID);
            _NearPlaneFade = material.GetFloat(_NearPlaneFadeID);
            _NearLightFade = material.GetFloat(_NearLightFadeID);
            _FadeBeginDistance = material.GetFloat(_FadeBeginDistanceID);
            _FadeCompleteDistance = material.GetFloat(_FadeCompleteDistanceID);
            _FadeMinValue = material.GetFloat(_FadeMinValueID);
            _HoverLight = material.GetFloat(_HoverLightID);
            _EnableHoverColorOverride = material.GetFloat(_EnableHoverColorOverrideID);
            _HoverColorOverride = material.GetColor(_HoverColorOverrideID);
            _ProximityLight = material.GetFloat(_ProximityLightID);
            _EnableProximityLightColorOverride = material.GetFloat(_EnableProximityLightColorOverrideID);
            _ProximityLightCenterColorOverride = material.GetColor(_ProximityLightCenterColorOverrideID);
            _ProximityLightMiddleColorOverride = material.GetColor(_ProximityLightMiddleColorOverrideID);
            _ProximityLightOuterColorOverride = material.GetColor(_ProximityLightOuterColorOverrideID);
            _ProximityLightSubtractive = material.GetFloat(_ProximityLightSubtractiveID);
            _ProximityLightTwoSided = material.GetFloat(_ProximityLightTwoSidedID);
            _FluentLightIntensity = material.GetFloat(_FluentLightIntensityID);
            _RoundCorners = material.GetFloat(_RoundCornersID);
            _RoundCornerRadius = material.GetFloat(_RoundCornerRadiusID);
            _RoundCornerMargin = material.GetFloat(_RoundCornerMarginID);
            _IndependentCorners = material.GetFloat(_IndependentCornersID);
            _RoundCornersRadius = material.GetVector(_RoundCornersRadiusID);
            _RoundCornersHideInterior = material.GetFloat(_RoundCornersHideInteriorID);
            _BorderLight = material.GetFloat(_BorderLightID);
            _BorderLightReplacesAlbedo = material.GetFloat(_BorderLightReplacesAlbedoID);
            _BorderLightOpaque = material.GetFloat(_BorderLightOpaqueID);
            _BorderWidth = material.GetFloat(_BorderWidthID);
            _BorderColorMode = material.GetFloat(_BorderColorModeID);
            _BorderMinValue = material.GetFloat(_BorderMinValueID);
            _BorderColor = material.GetColor(_BorderColorID);
            _EdgeSmoothingValue = material.GetFloat(_EdgeSmoothingValueID);
            _BorderLightOpaqueAlpha = material.GetFloat(_BorderLightOpaqueAlphaID);
            _InnerGlow = material.GetFloat(_InnerGlowID);
            _InnerGlowColor = material.GetColor(_InnerGlowColorID);
            _InnerGlowPower = material.GetFloat(_InnerGlowPowerID);
            _GradientMode = material.GetFloat(_GradientModeID);
            _IridescentSpectrumMap = (Texture2D)material.GetTexture(_IridescentSpectrumMapID);
            _IridescenceIntensity = material.GetFloat(_IridescenceIntensityID);
            _IridescenceThreshold = material.GetFloat(_IridescenceThresholdID);
            _IridescenceAngle = material.GetFloat(_IridescenceAngleID);
            _GradientAngle = material.GetFloat(_GradientAngleID);
            _GradientColor0 = material.GetColor(_GradientColor0ID);
            _GradientColor1 = material.GetColor(_GradientColor1ID);
            _GradientColor2 = material.GetColor(_GradientColor2ID);
            _GradientColor3 = material.GetColor(_GradientColor3ID);
            _GradientColor4 = material.GetColor(_GradientColor4ID);
            _EnvironmentColoring = material.GetFloat(_EnvironmentColoringID);
            _EnvironmentColorThreshold = material.GetFloat(_EnvironmentColorThresholdID);
            _EnvironmentColorIntensity = material.GetFloat(_EnvironmentColorIntensityID);
            _EnvironmentColorX = material.GetColor(_EnvironmentColorXID);
            _EnvironmentColorY = material.GetColor(_EnvironmentColorYID);
            _EnvironmentColorZ = material.GetColor(_EnvironmentColorZID);
            _Mode = material.GetFloat(_ModeID);
            _CustomMode = material.GetFloat(_CustomModeID);
            _SrcBlend = material.GetFloat(_SrcBlendID);
            _DstBlend = material.GetFloat(_DstBlendID);
            _BlendOp = material.GetFloat(_BlendOpID);
            _ZTest = material.GetFloat(_ZTestID);
            _ZWrite = material.GetFloat(_ZWriteID);
            _ZOffsetFactor = material.GetFloat(_ZOffsetFactorID);
            _ZOffsetUnits = material.GetFloat(_ZOffsetUnitsID);
            _ColorWriteMask = material.GetFloat(_ColorWriteMaskID);
            _CullMode = material.GetFloat(_CullModeID);
            _RenderQueueOverride = material.GetFloat(_RenderQueueOverrideID);
            _UseWorldScale = material.GetFloat(_UseWorldScaleID);
            _Stencil = material.GetFloat(_StencilID);
            _StencilReference = material.GetFloat(_StencilReferenceID);
            _StencilComparison = material.GetFloat(_StencilComparisonID);
            _StencilOperation = material.GetFloat(_StencilOperationID);
        }

        /// <inheritdoc/>
        public override void ApplyToMaterial(Material material)
        {
            material.SetColor(_ColorID, _Color);
            material.SetTexture(_MainTexID, (Texture2D)_MainTex);
            material.SetFloat(_AlbedoAlphaModeID, _AlbedoAlphaMode);
            material.SetFloat(_AlbedoAssignedAtRuntimeID, _AlbedoAssignedAtRuntime);
            material.SetFloat(_CutoffID, _Cutoff);
            material.SetFloat(_MetallicID, _Metallic);
            material.SetFloat(_SmoothnessID, _Smoothness);
            material.SetFloat(_EnableChannelMapID, _EnableChannelMap);
            material.SetTexture(_ChannelMapID, (Texture2D)_ChannelMap);
            material.SetFloat(_EnableNormalMapID, _EnableNormalMap);
            material.SetTexture(_NormalMapID, (Texture2D)_NormalMap);
            material.SetFloat(_NormalMapScaleID, _NormalMapScale);
            material.SetFloat(_EnableEmissionID, _EnableEmission);
            material.SetColor(_EmissiveColorID, _EmissiveColor);
            material.SetFloat(_EnableTriplanarMappingID, _EnableTriplanarMapping);
            material.SetFloat(_EnableSSAAID, _EnableSSAA);
            material.SetFloat(_MipmapBiasID, _MipmapBias);
            material.SetFloat(_EnableLocalSpaceTriplanarMappingID, _EnableLocalSpaceTriplanarMapping);
            material.SetFloat(_TriplanarMappingBlendSharpnessID, _TriplanarMappingBlendSharpness);
            material.SetFloat(_DirectionalLightID, _DirectionalLight);
            material.SetFloat(_SpecularHighlightsID, _SpecularHighlights);
            material.SetFloat(_SphericalHarmonicsID, _SphericalHarmonics);
            material.SetFloat(_ReflectionsID, _Reflections);
            material.SetFloat(_RefractionID, _Refraction);
            material.SetFloat(_RefractiveIndexID, _RefractiveIndex);
            material.SetFloat(_RimLightID, _RimLight);
            material.SetColor(_RimColorID, _RimColor);
            material.SetFloat(_RimPowerID, _RimPower);
            material.SetFloat(_VertexColorsID, _VertexColors);
            material.SetFloat(_VertexExtrusionID, _VertexExtrusion);
            material.SetFloat(_VertexExtrusionValueID, _VertexExtrusionValue);
            material.SetFloat(_VertexExtrusionSmoothNormalsID, _VertexExtrusionSmoothNormals);
            material.SetFloat(_BlendedClippingWidthID, _BlendedClippingWidth);
            material.SetFloat(_ClippingBorderID, _ClippingBorder);
            material.SetFloat(_ClippingBorderWidthID, _ClippingBorderWidth);
            material.SetColor(_ClippingBorderColorID, _ClippingBorderColor);
            material.SetFloat(_NearPlaneFadeID, _NearPlaneFade);
            material.SetFloat(_NearLightFadeID, _NearLightFade);
            material.SetFloat(_FadeBeginDistanceID, _FadeBeginDistance);
            material.SetFloat(_FadeCompleteDistanceID, _FadeCompleteDistance);
            material.SetFloat(_FadeMinValueID, _FadeMinValue);
            material.SetFloat(_HoverLightID, _HoverLight);
            material.SetFloat(_EnableHoverColorOverrideID, _EnableHoverColorOverride);
            material.SetColor(_HoverColorOverrideID, _HoverColorOverride);
            material.SetFloat(_ProximityLightID, _ProximityLight);
            material.SetFloat(_EnableProximityLightColorOverrideID, _EnableProximityLightColorOverride);
            material.SetColor(_ProximityLightCenterColorOverrideID, _ProximityLightCenterColorOverride);
            material.SetColor(_ProximityLightMiddleColorOverrideID, _ProximityLightMiddleColorOverride);
            material.SetColor(_ProximityLightOuterColorOverrideID, _ProximityLightOuterColorOverride);
            material.SetFloat(_ProximityLightSubtractiveID, _ProximityLightSubtractive);
            material.SetFloat(_ProximityLightTwoSidedID, _ProximityLightTwoSided);
            material.SetFloat(_FluentLightIntensityID, _FluentLightIntensity);
            material.SetFloat(_RoundCornersID, _RoundCorners);
            material.SetFloat(_RoundCornerRadiusID, _RoundCornerRadius);
            material.SetFloat(_RoundCornerMarginID, _RoundCornerMargin);
            material.SetFloat(_IndependentCornersID, _IndependentCorners);
            material.SetVector(_RoundCornersRadiusID, _RoundCornersRadius);
            material.SetFloat(_RoundCornersHideInteriorID, _RoundCornersHideInterior);
            material.SetFloat(_BorderLightID, _BorderLight);
            material.SetFloat(_BorderLightReplacesAlbedoID, _BorderLightReplacesAlbedo);
            material.SetFloat(_BorderLightOpaqueID, _BorderLightOpaque);
            material.SetFloat(_BorderWidthID, _BorderWidth);
            material.SetFloat(_BorderColorModeID, _BorderColorMode);
            material.SetFloat(_BorderMinValueID, _BorderMinValue);
            material.SetColor(_BorderColorID, _BorderColor);
            material.SetFloat(_EdgeSmoothingValueID, _EdgeSmoothingValue);
            material.SetFloat(_BorderLightOpaqueAlphaID, _BorderLightOpaqueAlpha);
            material.SetFloat(_InnerGlowID, _InnerGlow);
            material.SetColor(_InnerGlowColorID, _InnerGlowColor);
            material.SetFloat(_InnerGlowPowerID, _InnerGlowPower);
            material.SetFloat(_GradientModeID, _GradientMode);
            material.SetTexture(_IridescentSpectrumMapID, (Texture2D)_IridescentSpectrumMap);
            material.SetFloat(_IridescenceIntensityID, _IridescenceIntensity);
            material.SetFloat(_IridescenceThresholdID, _IridescenceThreshold);
            material.SetFloat(_IridescenceAngleID, _IridescenceAngle);
            material.SetFloat(_GradientAngleID, _GradientAngle);
            material.SetColor(_GradientColor0ID, _GradientColor0);
            material.SetColor(_GradientColor1ID, _GradientColor1);
            material.SetColor(_GradientColor2ID, _GradientColor2);
            material.SetColor(_GradientColor3ID, _GradientColor3);
            material.SetColor(_GradientColor4ID, _GradientColor4);
            material.SetFloat(_EnvironmentColoringID, _EnvironmentColoring);
            material.SetFloat(_EnvironmentColorThresholdID, _EnvironmentColorThreshold);
            material.SetFloat(_EnvironmentColorIntensityID, _EnvironmentColorIntensity);
            material.SetColor(_EnvironmentColorXID, _EnvironmentColorX);
            material.SetColor(_EnvironmentColorYID, _EnvironmentColorY);
            material.SetColor(_EnvironmentColorZID, _EnvironmentColorZ);
            material.SetFloat(_ModeID, _Mode);
            material.SetFloat(_CustomModeID, _CustomMode);
            material.SetFloat(_SrcBlendID, _SrcBlend);
            material.SetFloat(_DstBlendID, _DstBlend);
            material.SetFloat(_BlendOpID, _BlendOp);
            material.SetFloat(_ZTestID, _ZTest);
            material.SetFloat(_ZWriteID, _ZWrite);
            material.SetFloat(_ZOffsetFactorID, _ZOffsetFactor);
            material.SetFloat(_ZOffsetUnitsID, _ZOffsetUnits);
            material.SetFloat(_ColorWriteMaskID, _ColorWriteMask);
            material.SetFloat(_CullModeID, _CullMode);
            material.SetFloat(_RenderQueueOverrideID, _RenderQueueOverride);
            material.SetFloat(_UseWorldScaleID, _UseWorldScale);
            material.SetFloat(_StencilID, _Stencil);
            material.SetFloat(_StencilReferenceID, _StencilReference);
            material.SetFloat(_StencilComparisonID, _StencilComparison);
            material.SetFloat(_StencilOperationID, _StencilOperation);
        }

        /// <inheritdoc/>
        public override string GetTargetShaderName()
        {
            return "Graphics Tools/Standard";
        }
    }
}
